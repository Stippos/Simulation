function C = inventory_step(s,S,varargin)
% function C = inventory_step(s,S,varargin)
% The total cost of the (s,S)-inventory simulation
% - At s, order-up-to S
% - Inventory is controlled once a month
%
% ---------------------------------------------------------------
% INPUT
% s:        Order level (1x1 int)
% S:        Order-up-to level (1x1 in)
% ---------------------------------------------------------------
% OUTPUT
% C:        Total costs (1x1 double)
% ---------------------------------------------------------------
%
% Created: 2018-02-23 Heikki Puustinen



%% Initialization

y(1) = 60;              % Initial inventory
Tmax = 12;              % Total simulation time (months)

held = 0;               % Number of held items during simulation
back = 0;               % Number of backlogged items during simulation

c_f = 32;               % Fixed order costs
c_v = 3;                % Order cost per item

order_cost = 0;         % Total order costs during simulation
hold_cost = 1;          % Holding cost of items
short_cost = 5;         % Shortage cost of items

mtd = 0.1;              % Mean time between deliveries
dp = [1/6 3/6 5/6 1];   % Cumulative probabilities for size of demand

t(1) = 0;               % Simulation time
tp = 0;                 % Time of previous event
D = 0;                  % Demand of items
td = 0;                 % Time of next delivery (items leave inventory)
tc = 1;                 % Time, when inventory is next controlled
ts = 0;                 % Time of next supply (items arrive at inventory)
oa = 0;                 % Order amount

% Time of first supply is first set to a large number (so that it doesn't
% happen before it's time is determined)
ts = Tmax+1;

% Time of first demand
td = exprnd(mtd);


%% Animation objects
hWidth = 1200;
hHeight = 720;


h = figure( ...
    'Name','MS-E2710, Exercise 2.2: (s,S) inventory simulation', ...
    'Units','pixels', ...
    'Position',[0 0 hWidth hHeight]);

movegui(h,'center')

axWidth = 950;

ax = axes( ...
    'Parent',h, ...
    'Units','pixels', ...
    'OuterPosition',[0 0 axWidth hHeight], ...
    'XLim', [0 Tmax], ...
    'YLim', [-60 60]);
xlabel(ax,'Time [months]')
ylabel(ax,'Inventory')

ax.LooseInset = ax.TightInset;


% Plot inventory level against time
hInventory = line( ...
    'Parent',ax, ...
    'XData',NaN, ...
    'YData',NaN, ...
    'Color','k', ...
    'Linewidth',2);

% Plot zero-level
hZero = line( ...
    'Parent',ax, ...
    'XData',[0 Tmax], ...
    'YData',[0 0], ...
    'Color','k');

% Plot order-level
hOrderLevel = line( ...
    'Parent',ax, ...
    'XData',[0 Tmax], ...
    'YData',[s s], ...
    'Color','r');

% Plot order time
hOrder = line( ...
    'Parent',ax, ...
    'XData',NaN, ...
    'YData',NaN, ...
    'Color','b');

% Plot order time
hReplenish = line( ...
    'Parent',ax, ...
    'XData',NaN, ...
    'YData',NaN, ...
    'Color','g');

hLegend = legend( ...
    [hInventory, hOrder, hReplenish, hOrderLevel], ...
    'Inventory','Order time', 'Replenish time', 'Order level');


uipWidth = hWidth - axWidth - 5;
uipHeight = hHeight - 2 * 5;

% Info panel
uip = uipanel( ...
    'Parent',h, ...
    'Units','pixels', ...
    'Position',[axWidth 5 uipWidth uipHeight], ...
    'Title','Simulation status');

txtWidth = (uipWidth - 2 * 5) / 2;
txtHeight = 25;

% Time text
txtTime = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', [5 uipHeight - 2 * txtHeight txtWidth txtHeight], ...
    'String', 'Time:');

ediTime = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtTime.Position + [txtWidth 0 0 0], ...
    'String', '0');

% Next event

[timeNextEvent, indexNextEvent] = min([td, ts, tc]);

switch indexNextEvent
    case 1
        strEvent = 'delivery';
    case 2
        strEvent = 'replenish';
    case 3
        strEvent = 'control';
end

txtNextEvent = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', txtTime.Position - [0 txtHeight + 5 0 0], ...
    'String', 'Next event:');

ediNextEvent = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtNextEvent.Position + [txtWidth 0 0 0], ...
    'String', strEvent);

% Next event time
txtNextEventTime = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtNextEvent.Position - [0 txtHeight + 5 0 0], ...
    'String', 'at:');

ediNextEventTime = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtNextEventTime.Position + [txtWidth 0 0 0], ...
    'String', sprintf('%.2f',timeNextEvent));

% Last event
txtLastEvent = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', txtNextEventTime.Position - [0 txtHeight + 5 0 0], ...
    'String', 'Last event:');

ediLastEvent = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtLastEvent.Position + [txtWidth 0 0 0], ...
    'String', 'N/A');

% Last event info
txtLastInfo = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtLastEvent.Position - [0 txtHeight + 5 0 0], ...
    'String', 'Info:');

ediLastInfo = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtLastInfo.Position + [txtWidth 0 0 0], ...
    'String', 'N/A');

% Inventory
txtInventory = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', txtLastInfo.Position - [0 txtHeight + 5 0 0], ...
    'String', 'Inventory:');

ediInventory = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtInventory.Position + [txtWidth 0 0 0], ...
    'String', y(1));

% Backlog
txtBacklog = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', txtInventory.Position - [0 txtHeight + 5 0 0], ...
    'String', 'Backlog:');

ediBacklog = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtBacklog.Position + [txtWidth 0 0 0], ...
    'String', 0);

% Total cost
txtTotalCost = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','text', ...
    'HorizontalAlignment','left', ...
    'FontSize', 16, ...
    'Position', txtBacklog.Position - [0 2 * txtHeight 0 0], ...
    'String', 'Total cost:');

ediTotalCost = uicontrol(...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','edit', ...
    'HorizontalAlignment','center', ...
    'FontSize', 16, ...
    'Position', txtTotalCost.Position + [txtWidth 0 0 0], ...
    'String', 0);

btnNext = uicontrol( ...
    'Parent',uip, ...
    'Units','pixels', ...
    'Style','pushbutton', ...
    'String','Next event', ...
    'FontSize', 16, ...
    'Position',[5 5 uipWidth - 2 * 5 45], ...
    'Callback',@nextEvent);

%% Simulation
    function nextEvent(varargin)
        
        % Continue simulation while simulation time is less than the maximum time
        if t(end) < Tmax
            
            % The simulation has three kind of events:
            % 1) Delivery is made out of the inventory
            % 2) The inventory is controlled
            % 3) The inventory is replenished
            
            % Time of delivery is the next event, i.e., it has smallest time
            if td <= ts && td <= tc
                
                % Update simulation time to the time of current event time
                t(end+1) = td;
                
                % Update counters for held or backlogged items
                
                % If there are items in inventory, add to held items the size of
                % the inventory times the time interval between now and last event
                if y(end) > 0
                    held = held + y(end) * (t(end) - tp);
                elseif y(end) < 0
                    % If inventory is empty and items are backlogged, calculate the
                    % backlogged items similarly
                    back = back - y(end) * (t(end) - tp);
                end
                
                % Update time of previous event to now
                tp = t(end);
                
                % Generate random number from the uniform distribution in order to
                % determine the demand.
                u = rand;
                
                % Loop through demand probabilities
                for ii = 1:length(dp)
                    
                    % If demand is less than ii:th element
                    if u < dp(ii)
                        % Set demand as the ii
                        D = ii;
                        % Break out from the loop as we found our demand
                        break;
                    end
                end
                
                % Update inventory level
                y(end+1) = y(end) - D;
                
                % Generate time of next demand
                td = t(end) + exprnd(mtd);
                
                ediLastEvent.String = 'delivery';
                ediLastInfo.String = sprintf('%i',D);
                
            elseif tc < td && tc < ts
                % Inventory control is the next event, i.e., it has the smallest
                % time
                
                % Update simulation time to currenct event time
                t(end+1) = tc;
                
                % Update counters for held or backlogged items
                if y(end) > 0
                    held = held + y(end) * (t(end) - tp);
                elseif y(end) < 0
                    back = back - y(end) * (t(end) - tp);
                end
                
                % Update time of the previous event to now
                tp = t(end);
                
                % Check, if inventory level is under s
                if y(end) < s
                    % Order amount (S-inventory)
                    oa = S - y(end);
                    % Order delay
                    ts = t(end) + unifrnd(0.5,1);
                    % Order costs (fixed + variable)
                    order_cost =  order_cost + c_f + c_v * oa;
                end
                
                % Inventory level is not changed
                y(end+1) = y(end);
                
                % Update time of next control - at the start of next month
                tc= t(end)+1;
                
                ediLastEvent.String = 'control';
                
                ediLastInfo.String = sprintf('%i',oa);
                
                if y(end) < s

                    line( ...
                        'Parent',ax, ...
                        'XData',[t(end) t(end)], ...
                        'YData',[-60 60], ...
                        'Color','b');
                end
                
            elseif ts < td && ts < tc
                % Order arrival (supply) is the next event
                
                % Update Simulation time to current event time
                t(end+1) = ts;
                
                % Update counters for held or backlogged items
                if y(end) > 0
                    held = held + y(end) * (t(end) - tp);
                elseif y(end) < 0
                    back = back - y(end) * (t(end) - tp);
                end
                
                % Update time of previous event to now
                tp = t(end);
                
                % Update inventory level, i.e., add the order amount to inventory
                y(end+1) = y(end) + oa;
                % Reset time of supply
                ts = Tmax+1;
                % Reset order ammount
                oa = 0;
                
                ediLastEvent.String = 'replenish';
                ediLastInfo.String = sprintf('%i',s);
                
                line( ...
                    'Parent',ax, ...
                    'XData',[t(end) t(end)], ...
                    'YData',[-60 60], ...
                    'Color','g');
                
            end
            
            % Update counters from the remaining simulation time
            % in case all events are scheduled after Tmax
            if min(td,min(ts,tc)) >= Tmax
                
                t(end) = Tmax;
                
                if y(end) > 0
                    held = held + y(end) * (t(end)-tp);
                elseif y < 0
                    back = back - y(end) * (t(end)-tp);
                end
            end
            
            % Update simulation status time etc.
            
            ediTime.String = sprintf('%.2f',t(end));
            ediInventory.String = sprintf('%i',max(y(end),0));
            ediBacklog.String = sprintf('%i',abs(min(y(end),0)));
            
            set(hInventory,'XData',t,'YData',y);
            
            [timeNextEvent, indexNextEvent] = min([td, ts, tc]);
            
            switch indexNextEvent
                case 1
                    strEvent = 'delivery';
                case 2
                    strEvent = 'replenish';
                case 3
                    strEvent = 'control';
            end
            
            ediNextEvent.String = strEvent;
            ediNextEventTime.String = sprintf('%.2f',timeNextEvent);
            
            totalCost = held * hold_cost + back * short_cost + order_cost;
            
            ediTotalCost.String = sprintf('%.2f',totalCost);
            
            
            % Plot
            
            Y = zeros(2*length(y),1);
            T = zeros(2*length(y)-2,1);
            
            for ii = 1:length(y)
                Y(2*ii-1) = y(ii);
                Y(2*ii) = y(ii);
            end
            
            for ii=2:length(t-1)
                T(2*(ii-2)+1) = t(ii);
                T(2*(ii-2)+2) = t(ii);
            end
            T=[0; T; T(end)];
            
            set(hInventory,'XData',T,'YData',Y);
            
            
        end
        
        % Calculate average monthly cost
        C = held * hold_cost + back * short_cost + order_cost;
        C = C / Tmax;
        
    end
end
